[package]
name = "polars-view"
version = "0.51.2"
edition = "2024"
repository = "https://github.com/claudiofsr/polars-view"
homepage = "https://github.com/claudiofsr/polars-view"
documentation = "https://docs.rs/polars-view"
license = "MIT"
authors = [
    "Claudio Fernandes de Souza Rodrigues <claudiofsrodrigues@gmail.com>",
]
rust-version = "1.90"
description = "A fast and interactive viewer for CSV, Json and Parquet data."
keywords = [
    "csv",
    "json",
    "parquet",
    "polars",
    "view",
]

[dependencies]
# Main application dependencies
anstyle = "1.0" # Used by clap color
cfg-if = "1.0"
clap = { version = "4.5", features = ["color", "derive"] }
eframe = { version = "0.33", features = ["persistence"] }
egui_extras = { version = "0.33", features = ["serde"] }
regex = "1.12"
rfd = { version ="0.15", features = ["file-handle-inner"] }
thiserror = "2.0"
tokio = { version = "1.48", features = ["full", "macros"] }
tracing = "0.1"
tracing-subscriber = "0.3"

[dependencies.egui]
version = "0.33"
features = [
    "persistence",  # Enable persistence of memory (window positions etc).
    "rayon",        # Enable parallel tessellation using rayon.
    "serde",        # Allow serialization using serde.
]

[dependencies.polars]
version = "0.51.0"
features = [
    "lazy",          # Lazy API
    "csv",           # Read CSV format
    "json",          # Read Json format
    "parquet",       # Read Apache Parquet format
    "sql",
    "serde",
    "regex",         # Efficient matching against multiple patterns
    "dtype-array",   # ListChunked
    "dtype-categorical",
    # "dtype-decimal",    
    "dtype-struct",  # Keep the original column root name
    "round_series",  # Round underlying float types of Series
    "strings",       # Extra string utilities for Utf8Chunked
    "string_encoding",
    "temporal",      # Automatically try to parse dates/datetimes and time.
    "new_streaming", # Be able to process datasets that are larger than RAM.
]

[dev-dependencies]
# Dependencies ONLY needed for testing
tempfile = "3.23"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.11"

[lints.rust]
unsafe_code = "forbid"

[features]
default = ["format-simple"]

# Use simple or special format
format-simple =  [] # mod decimal_and_layout_v1: fn get_decimal_and_layout()
format-special = [] # mod decimal_and_layout_v2: fn get_decimal_and_layout()

# cargo run --features format-special
# cargo b -r && cargo install --path=. --features format-special

[profile.release]
# https://doc.rust-lang.org/cargo/reference/profiles.html
debug = false           # No debug info at all.
strip = "symbols"       # Strip symbols from a binary.
opt-level = 3           # All optimizations.
overflow-checks = true  # Panic will occur on overflow.
lto = true              # Enable link time optimization.
codegen-units = 1       # Use a single codegen for size optimization.
panic = "abort"         # Remove traceback information.
incremental = true      # Save information to disk, improving re-compile times.

[profile.dev]
opt-level = 1

# Cross-compile a Rust application from Linux to Windows
# On Manjaro Linux, install with: pacman -S mingw-w64-gcc
# rustup target list
# After downloading the target with `rustup target add x86_64-pc-windows-gnu`
# cargo b -r --target x86_64-unknown-linux-gnu --target x86_64-pc-windows-gnu
